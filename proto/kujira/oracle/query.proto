syntax = "proto3";
package kujira.oracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "kujira/oracle/oracle.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/Team-Kujira/core/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  // ExchangeRate returns exchange rate of a denom
  rpc ExchangeRate(QueryExchangeRateRequest) returns (QueryExchangeRateResponse) {
    option (google.api.http).get = "/oracle/denoms/{denom}/exchange_rate";
  }

  // ExchangeRates returns exchange rates of all denoms
  rpc ExchangeRates(QueryExchangeRatesRequest) returns (QueryExchangeRatesResponse) {
    option (google.api.http).get = "/oracle/denoms/exchange_rates";
  }

  // Actives returns all active denoms
  rpc Actives(QueryActivesRequest) returns (QueryActivesResponse) {
    option (google.api.http).get = "/oracle/denoms/actives";
  }

  // MissCounter returns oracle miss counter of a validator
  rpc MissCounter(QueryMissCounterRequest) returns (QueryMissCounterResponse) {
    option (google.api.http).get = "/oracle/validators/{validator_addr}/miss";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/oracle/params";
  }
}

// QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC method.
message QueryExchangeRateRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // denom defines the denomination to query for.
  string denom = 1;
}

// QueryExchangeRateResponse is response type for the
// Query/ExchangeRate RPC method.
message QueryExchangeRateResponse {
  // exchange_rate defines the exchange rate of whitelisted assets
  string exchange_rate = 1
      [(gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (gogoproto.nullable) = false];
}

// QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC method.
message QueryExchangeRatesRequest {}

// QueryExchangeRatesResponse is response type for the
// Query/ExchangeRates RPC method.
message QueryExchangeRatesResponse {
  // exchange_rates defines a list of the exchange rate for all whitelisted denoms.
  repeated cosmos.base.v1beta1.DecCoin exchange_rates = 1
      [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins", (gogoproto.nullable) = false];
}

// QueryActivesRequest is the request type for the Query/Actives RPC method.
message QueryActivesRequest {}

// QueryActivesResponse is response type for the
// Query/Actives RPC method.
message QueryActivesResponse {
  // actives defines a list of the denomination which oracle prices aggreed upon.
  repeated string actives = 1;
}

// QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC method.
message QueryVoteTargetsRequest {}

// QueryVoteTargetsResponse is response type for the
// Query/VoteTargets RPC method.
message QueryVoteTargetsResponse {
  // vote_targets defines a list of the denomination in which everyone
  // should vote in the current vote period.
  repeated string vote_targets = 1;
}

// QueryMissCounterRequest is the request type for the Query/MissCounter RPC method.
message QueryMissCounterRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // validator defines the validator address to query for.
  string validator_addr = 1;
}

// QueryMissCounterResponse is response type for the
// Query/MissCounter RPC method.
message QueryMissCounterResponse {
  // miss_counter defines the oracle miss counter of a validator
  uint64 miss_counter = 1;
}


// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];
}