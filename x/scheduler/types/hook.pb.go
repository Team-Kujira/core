// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scheduler/hook.proto

package types

import (
	fmt "fmt"
	github_com_CosmWasm_wasmd_x_wasm_types "github.com/CosmWasm/wasmd/x/wasm/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hook struct {
	Id        uint64                                                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Executor  string                                                    `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty"`
	Contract  string                                                    `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	Msg       github_com_CosmWasm_wasmd_x_wasm_types.RawContractMessage `protobuf:"bytes,4,opt,name=msg,proto3,casttype=github.com/CosmWasm/wasmd/x/wasm/types.RawContractMessage" json:"msg,omitempty"`
	Frequency int64                                                     `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Funds     github_com_cosmos_cosmos_sdk_types.Coins                  `protobuf:"bytes,6,rep,name=funds,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"funds"`
}

func (m *Hook) Reset()         { *m = Hook{} }
func (m *Hook) String() string { return proto.CompactTextString(m) }
func (*Hook) ProtoMessage()    {}
func (*Hook) Descriptor() ([]byte, []int) {
	return fileDescriptor_4496d7cba5d29acb, []int{0}
}
func (m *Hook) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hook.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hook.Merge(m, src)
}
func (m *Hook) XXX_Size() int {
	return m.Size()
}
func (m *Hook) XXX_DiscardUnknown() {
	xxx_messageInfo_Hook.DiscardUnknown(m)
}

var xxx_messageInfo_Hook proto.InternalMessageInfo

func (m *Hook) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hook) GetExecutor() string {
	if m != nil {
		return m.Executor
	}
	return ""
}

func (m *Hook) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Hook) GetMsg() github_com_CosmWasm_wasmd_x_wasm_types.RawContractMessage {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Hook) GetFrequency() int64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Hook) GetFunds() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Funds
	}
	return nil
}

func init() {
	proto.RegisterType((*Hook)(nil), "kujira.scheduler.Hook")
}

func init() { proto.RegisterFile("scheduler/hook.proto", fileDescriptor_4496d7cba5d29acb) }

var fileDescriptor_4496d7cba5d29acb = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xbf, 0x4e, 0xc2, 0x40,
	0x18, 0xc0, 0x7b, 0x2d, 0x10, 0xa9, 0xc6, 0x98, 0x86, 0xa1, 0x12, 0x53, 0x1a, 0xa7, 0x2e, 0xdc,
	0x89, 0x4e, 0x0e, 0x2e, 0x30, 0x68, 0x62, 0x8c, 0x49, 0x63, 0x62, 0xe2, 0x76, 0xbd, 0x1e, 0xa5,
	0xd6, 0xf6, 0xc3, 0xde, 0x55, 0xe0, 0x2d, 0x7c, 0x04, 0x67, 0x9f, 0x84, 0x91, 0xd1, 0x09, 0x0d,
	0xbc, 0x85, 0x93, 0xe9, 0x1f, 0x81, 0xe9, 0xbb, 0xef, 0x7e, 0x77, 0xbf, 0x7c, 0x7f, 0xf4, 0x96,
	0x60, 0x23, 0xee, 0x67, 0x2f, 0x3c, 0x25, 0x23, 0x80, 0x08, 0x8f, 0x53, 0x90, 0x60, 0x1c, 0x45,
	0xd9, 0x73, 0x98, 0x52, 0xbc, 0x81, 0xed, 0x56, 0x00, 0x01, 0x14, 0x90, 0xe4, 0xa7, 0xf2, 0x5d,
	0xdb, 0x62, 0x20, 0x62, 0x10, 0xc4, 0xa3, 0x82, 0x93, 0xb7, 0x9e, 0xc7, 0x25, 0xed, 0x11, 0x06,
	0x61, 0x52, 0xf2, 0xd3, 0x0f, 0x55, 0xaf, 0xdd, 0x00, 0x44, 0xc6, 0xa1, 0xae, 0x86, 0xbe, 0x89,
	0x6c, 0xe4, 0xd4, 0x5c, 0x35, 0xf4, 0x8d, 0xb6, 0xbe, 0xc7, 0xa7, 0x9c, 0x65, 0x12, 0x52, 0x53,
	0xb5, 0x91, 0xd3, 0x74, 0x37, 0x79, 0xce, 0x18, 0x24, 0x32, 0xa5, 0x4c, 0x9a, 0x5a, 0xc9, 0xfe,
	0x73, 0xe3, 0x5e, 0xd7, 0x62, 0x11, 0x98, 0x35, 0x1b, 0x39, 0x07, 0xfd, 0xab, 0xdf, 0x65, 0xe7,
	0x32, 0x08, 0xe5, 0x28, 0xf3, 0x30, 0x83, 0x98, 0x0c, 0x40, 0xc4, 0x8f, 0x54, 0xc4, 0x64, 0x42,
	0x45, 0xec, 0x93, 0x69, 0x11, 0x89, 0x9c, 0x8d, 0xb9, 0xc0, 0x2e, 0x9d, 0x0c, 0x2a, 0xc9, 0x1d,
	0x17, 0x82, 0x06, 0xdc, 0xcd, 0x4d, 0xc6, 0x89, 0xde, 0x1c, 0xa6, 0xfc, 0x35, 0xe3, 0x09, 0x9b,
	0x99, 0x75, 0x1b, 0x39, 0x9a, 0xbb, 0xbd, 0x30, 0xa8, 0x5e, 0x1f, 0x66, 0x89, 0x2f, 0xcc, 0x86,
	0xad, 0x39, 0xfb, 0xe7, 0xc7, 0xb8, 0xec, 0x17, 0xe7, 0xfd, 0xe2, 0xaa, 0x5f, 0x3c, 0x80, 0x30,
	0xe9, 0x9f, 0xcd, 0x97, 0x1d, 0xe5, 0xf3, 0xbb, 0xe3, 0xec, 0xd4, 0x53, 0x0d, 0xa7, 0x0c, 0x5d,
	0xe1, 0x47, 0x55, 0x2d, 0xf9, 0x07, 0xe1, 0x96, 0xe6, 0xfe, 0xf5, 0x7c, 0x65, 0xa1, 0xc5, 0xca,
	0x42, 0x3f, 0x2b, 0x0b, 0xbd, 0xaf, 0x2d, 0x65, 0xb1, 0xb6, 0x94, 0xaf, 0xb5, 0xa5, 0x3c, 0x75,
	0x77, 0x54, 0x0f, 0x9c, 0xc6, 0xdd, 0xdb, 0x62, 0x29, 0x84, 0x41, 0xca, 0xc9, 0x94, 0x6c, 0x17,
	0x57, 0x58, 0xbd, 0x46, 0x31, 0xf2, 0x8b, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x29, 0xdb,
	0xda, 0xd2, 0x01, 0x00, 0x00,
}

func (m *Hook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hook) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hook) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHook(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Frequency != 0 {
		i = encodeVarintHook(dAtA, i, uint64(m.Frequency))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintHook(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintHook(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintHook(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHook(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHook(dAtA []byte, offset int, v uint64) int {
	offset -= sovHook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Hook) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHook(uint64(m.Id))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovHook(uint64(l))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovHook(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHook(uint64(l))
	}
	if m.Frequency != 0 {
		n += 1 + sovHook(uint64(m.Frequency))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovHook(uint64(l))
		}
	}
	return n
}

func sovHook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHook(x uint64) (n int) {
	return sovHook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHook
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			m.Frequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Frequency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, types.Coin{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHook = fmt.Errorf("proto: unexpected end of group")
)
