// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kujira/intertx/callback.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CallbackData struct {
	CallbackKey  string `protobuf:"bytes,1,opt,name=callback_key,json=callbackKey,proto3" json:"callback_key,omitempty"`
	PortId       string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	ChannelId    string `protobuf:"bytes,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Sequence     uint64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Contract     string `protobuf:"bytes,5,opt,name=contract,proto3" json:"contract,omitempty"`
	ConnectionId string `protobuf:"bytes,6,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	AccountId    string `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TxId         uint64 `protobuf:"varint,8,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *CallbackData) Reset()         { *m = CallbackData{} }
func (m *CallbackData) String() string { return proto.CompactTextString(m) }
func (*CallbackData) ProtoMessage()    {}
func (*CallbackData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e37036f9661d303d, []int{0}
}
func (m *CallbackData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallbackData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallbackData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallbackData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallbackData.Merge(m, src)
}
func (m *CallbackData) XXX_Size() int {
	return m.Size()
}
func (m *CallbackData) XXX_DiscardUnknown() {
	xxx_messageInfo_CallbackData.DiscardUnknown(m)
}

var xxx_messageInfo_CallbackData proto.InternalMessageInfo

func (m *CallbackData) GetCallbackKey() string {
	if m != nil {
		return m.CallbackKey
	}
	return ""
}

func (m *CallbackData) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *CallbackData) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *CallbackData) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *CallbackData) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *CallbackData) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *CallbackData) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *CallbackData) GetTxId() uint64 {
	if m != nil {
		return m.TxId
	}
	return 0
}

func init() {
	proto.RegisterType((*CallbackData)(nil), "kujira.intertx.CallbackData")
}

func init() { proto.RegisterFile("kujira/intertx/callback.proto", fileDescriptor_e37036f9661d303d) }

var fileDescriptor_e37036f9661d303d = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0x4f, 0x4f, 0x32, 0x31,
	0x10, 0xc6, 0xe9, 0xfb, 0xf2, 0xb7, 0xa2, 0x87, 0x6a, 0xe2, 0x86, 0xc8, 0x06, 0xf5, 0xc2, 0x41,
	0xe8, 0xc1, 0x6f, 0xa0, 0xc6, 0x64, 0xc3, 0x8d, 0x78, 0xf2, 0x42, 0x4a, 0xb7, 0x59, 0x56, 0x96,
	0xce, 0x5a, 0x66, 0x93, 0xe5, 0x5b, 0xf8, 0xb1, 0x3c, 0x72, 0xf4, 0x68, 0xe0, 0x5b, 0x78, 0x32,
	0x6d, 0x17, 0xbc, 0xf5, 0x79, 0x7e, 0xd3, 0x79, 0x26, 0x33, 0xb4, 0xbf, 0x2c, 0xde, 0x52, 0x23,
	0x78, 0xaa, 0x51, 0x19, 0x2c, 0xb9, 0x14, 0x59, 0x36, 0x17, 0x72, 0x39, 0xce, 0x0d, 0x20, 0xb0,
	0x33, 0x8f, 0xc7, 0x15, 0xee, 0x5d, 0x24, 0x90, 0x80, 0x43, 0xdc, 0xbe, 0x7c, 0x55, 0xef, 0x2a,
	0x01, 0x48, 0x32, 0xc5, 0x45, 0x9e, 0x72, 0xa1, 0x35, 0xa0, 0xc0, 0x14, 0xf4, 0xda, 0xd3, 0x9b,
	0x1f, 0x42, 0xbb, 0x8f, 0x55, 0xdb, 0x27, 0x81, 0x82, 0x5d, 0xd3, 0xee, 0x21, 0x66, 0xb6, 0x54,
	0x9b, 0x80, 0x0c, 0xc8, 0xb0, 0x33, 0x3d, 0x39, 0x78, 0x13, 0xb5, 0x61, 0x97, 0xb4, 0x95, 0x83,
	0xc1, 0x59, 0x1a, 0x07, 0xff, 0x1c, 0x6d, 0x5a, 0x19, 0xc5, 0xac, 0x4f, 0xa9, 0x5c, 0x08, 0xad,
	0x55, 0x66, 0xd9, 0x7f, 0xc7, 0x3a, 0x95, 0x13, 0xc5, 0xac, 0x47, 0xdb, 0x6b, 0xf5, 0x5e, 0x28,
	0x2d, 0x55, 0x50, 0x1f, 0x90, 0x61, 0x7d, 0x7a, 0xd4, 0x96, 0x49, 0xd0, 0x68, 0x84, 0xc4, 0xa0,
	0xe1, 0x3e, 0x1e, 0x35, 0xbb, 0xa5, 0xa7, 0x12, 0xb4, 0x56, 0xd2, 0x0e, 0x6e, 0x3b, 0x37, 0x5d,
	0x41, 0xf7, 0xcf, 0xf4, 0xd9, 0x42, 0x4a, 0x28, 0xb4, 0x9b, 0xab, 0xe5, 0xb3, 0x2b, 0x27, 0x8a,
	0xd9, 0x39, 0x6d, 0x60, 0x69, 0x49, 0xdb, 0x05, 0xd7, 0xb1, 0x8c, 0xe2, 0x87, 0xe7, 0xcf, 0x5d,
	0x48, 0xb6, 0xbb, 0x90, 0x7c, 0xef, 0x42, 0xf2, 0xb1, 0x0f, 0x6b, 0xdb, 0x7d, 0x58, 0xfb, 0xda,
	0x87, 0xb5, 0xd7, 0xbb, 0x24, 0xc5, 0x45, 0x31, 0x1f, 0x4b, 0x58, 0xf1, 0x17, 0x25, 0x56, 0xa3,
	0x89, 0xbf, 0x84, 0x04, 0xa3, 0x78, 0xe9, 0x0f, 0x32, 0xc2, 0x92, 0xe3, 0x26, 0x57, 0xeb, 0x79,
	0xd3, 0xed, 0xf2, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x15, 0x30, 0x91, 0x4d, 0xb0, 0x01, 0x00,
	0x00,
}

func (m *CallbackData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallbackData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallbackData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxId != 0 {
		i = encodeVarintCallback(dAtA, i, uint64(m.TxId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AccountId) > 0 {
		i -= len(m.AccountId)
		copy(dAtA[i:], m.AccountId)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.AccountId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sequence != 0 {
		i = encodeVarintCallback(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallbackKey) > 0 {
		i -= len(m.CallbackKey)
		copy(dAtA[i:], m.CallbackKey)
		i = encodeVarintCallback(dAtA, i, uint64(len(m.CallbackKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCallback(dAtA []byte, offset int, v uint64) int {
	offset -= sovCallback(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CallbackData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallbackKey)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovCallback(uint64(m.Sequence))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovCallback(uint64(l))
	}
	if m.TxId != 0 {
		n += 1 + sovCallback(uint64(m.TxId))
	}
	return n
}

func sovCallback(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCallback(x uint64) (n int) {
	return sovCallback(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CallbackData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCallback
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallbackData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallbackData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCallback
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCallback
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			m.TxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCallback(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCallback
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCallback(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCallback
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCallback
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCallback
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCallback
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCallback
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCallback        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCallback          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCallback = fmt.Errorf("proto: unexpected end of group")
)
